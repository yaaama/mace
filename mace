#!/usr/bin/env sh

# TODO Check for duplicate processes

# // mace
# // ~~~~
# Copyright (C) 2024 Sau P

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

command="$1"

# Check for doom cli existence
command -v doom >/dev/null 2>&1
found=$?

# If there is no 'doom' in the path.
if [ $found -eq 1 ]; then
	printf "[mace] Error! 'doom' cli not found in PATH.\n"
	exit 1
fi

# Checks for running instance
is_daemon_running() {
	pgrep "emacs" >/dev/null 2>&1
	return $?
}

##############
# # Commands #
##############

# Starts a daemon
start_daemon() {
	notify-send "[mace] Starting up emacs daemon..."
	printf "[mace] Starting up daemon.\n"
	emacs --daemon
	printf "[mace] Daemon started.\n"
	notify-send "emacs daemon started!"
}

# Kills a daemon if it exists
kill_daemon() {
	if is_daemon_running; then
		# Don't request for confirmation
		emacsclient -e "(setq confirm-kill-emacs nil)"
		# Save all buffers by default
		emacsclient -e "(save-buffers-kill-emacs t nil)"
		printf "[mace] Killed emacs daemon.\n"
	else
		printf "[mace] No active daemons to kill.\n"
	fi
}

# Runs the emacs client
run_eclient() {
	emacsclient -c -n -a="" || notify-send "[mace] Failed to create new frame! :(" && exit 1
	notify-send "[mace] Opening emacs client!"
}

# Will kill and then restart the emacs daemon.
restart_daemon() {
	kill_daemon &&
		start_daemon
	notify-send "[mace] Emacs daemon started!"
}

if [ -z "$command" ] && ! is_daemon_running; then
	start_daemon
	run_eclient

fi

# Help text to be displayed
print_help() {

	printf "Usage: mace [COMMAND]\n"
	printf "Commands:\n"
	# printf "[formatting]" "[option]" "description"
	printf "  %-12s%s\n" "-h" "Show this help message."
	printf "  %-12s%s\n" "-a" "Check for running Emacs daemons."
	printf "  %-12s%s\n" "-s" "Start Emacs daemon."
	printf "  %-12s%s\n" "-sr" "Restart Emacs daemon."
	printf "  %-12s%s\n" "-sk" "Kill any Emacs daemon instances."

	printf "  %-12s%s\n" "-g" "Open Emacs in GUI mode."
	printf "  %-12s%s\n" "-t" "Open Emacs in the current terminal."
	printf "  %-12s%s\n" "-deb" "Alias for \"emacs --debug-init\"."

	# Doom commands
	printf "DOOM Commands:\n"
	printf "  %-12s%s\n" "-c" "Open Doom capture mode in new frame."
	printf "  %-12s%s\n" "-ds" "Alias for \"doom sync\"."
	printf "  %-12s%s\n" "-dsu" "Alias for \"doom sync -u\". Use this if you change an installed package recipe."
	printf "  %-12s%s\n" "-db" "Alias for \"doom build\". This will rebuild and do a fresh byte-compile of all packages"
	printf "  %-12s%s\n" "-dp" "Alias for \"doom purge\"."
	printf "  %-12s%s\n" "-du" "Alias for \"doom upgrade\"."
	printf "  %-12s%s\n" "-dc" "Alias for \"doom clean\"."
	printf "  %-12s%s\n" "-dd" "Alias for \"doom doctor\"."

}

if [ -z "$1" ]; then
	run_eclient
	exit 0
fi

doom_capture() {
	emacsclient -u -a="" -e "(+org-capture/open-frame)" || echo "Could not capture?"
}

case "$command" in
	# Will print out the available commands
	-h)
		print_help
		;;

	# -a Checks for whether server is active
	-a)
		if is_daemon_running; then
			printf "[mace] Emacs daemon is currently ACTIVE.\n"
		else
			printf "[mace] Emacs daemon is not currently running.\n"
		fi
		;;
	-c) doom_capture ;;         # Opens doom capture window
	-s) start_daemon ;;         # Starts a server
	-sr) restart_daemon ;;      # Restarts the server daemon
	-sk) kill_daemon ;;         # Kills the server daemon
	-g) run_eclient ;;          # Starts Emacs client in GUI mode
	-t) emacsclient -nw ;;      # This will start the terminal client
	-deb) emacs --debug-init ;; # Starts emacs in debug mode
	# Doom Aliases
	-ds) doom sync ;;
	-dsu) doom sync -u ;;
	-du) doom upgrade ;;
	-db) doom build ;;
	-dp) doom purge ;;
	-dc) doom clean ;;
	-dd) doom doctor ;;

	*) # Will print out help if any other key is typed
		print_help ;;

esac
