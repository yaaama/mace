#!/bin/sh

command="$1"
doompath="$HOME/.config/emacs/bin/doom"

# If mace was run without any arguments, open up a regular emacs instance
if [ -z "$1" ]; then
	emacs
fi



# Help text to be displayed
print_help() {

	printf "Usage: mace [COMMAND]\n"
	printf "Commands:\n"
	# printf "[formatting]" "[option]" "description"
	printf "  %-12s%s\n" "-h" "Show this help message."
	printf "  %-12s%s\n" "-a" "Check for running Emacs daemons."
	printf "  %-12s%s\n" "-s" "Start Emacs daemon."
	printf "  %-12s%s\n" "-sr" "Restart Emacs daemon."
	printf "  %-12s%s\n" "-sk" "Kill any Emacs daemon instances."

	printf "  %-12s%s\n" "-g" "Open Emacs in GUI mode."
	printf "  %-12s%s\n" "-t" "Open Emacs in the current terminal."
	printf "  %-12s%s\n" "-deb" "Alias for \"emacs --debug-init\"."

	# Doom commands
	printf "DOOM Commands:\n"
	printf "  %-12s%s\n" "-ds" "Alias for \"doom sync\"."
	printf "  %-12s%s\n" "-db" "Alias for \"doom build\". This will rebuild and re-byte compile all packages."
	printf "  %-12s%s\n" "-dp" "Alias for \"doom purge\"."
	printf "  %-12s%s\n" "-du" "Alias for \"doom upgrade\"."
	printf "  %-12s%s\n" "-dd" "Alias for \"doom doctor\"."

}

# Variable that checks for the existence of the emacs daemon
clientActive=$(pgrep -f "emacs --daemon")
instanceActive=$(pgrep -f "emacs")


##############
# # Commands #
##############

# `-a` checks for whether the daemon is active
is_server_active() {

	if [ -z "$clientActive" ]; then
		echo "Emacs daemon is not active."
	else
		echo "Emacs daemon is active."
	fi

}

# Starts a daemon
start_daemon() { # function to start the daemon
	if [ -z "$clientActive" ] && [ -z "$instanceActive" ]; then
		emacs --daemon >/dev/null 2>&1
		echo "Emacs daemon started!"
	else
		echo "Daemon or instance is already running."
	fi
}

# Kills a daemon if it exists
kill_daemon() { # Function to kill the daemon

	if [ -z "$clientActive" ]; then
		echo "Cannot kill daemon as none are running."
	else
	pkill -f "emacs --daemon" >/dev/null &&
	echo "Killed emacs daemon."
	fi
}

run_eclient() {
	if [ -z "$clientActive" ]; then
		notify-send "Emacs daemon starting..."
		start_daemon
	fi
	notify-send "Opening emacsclient!"
	emacsclient -nc
}


restart_server() {
	kill_daemon  && # Will kill and then restart the emacs daemon.
	start_daemon &&
	notify-send "Emacs server has restarted!"
}






case "$command" in
	-h) # Will print out the available commands
		print_help ;;
	-a) is_server_active ;; # Checks for whether server is active
	-s) start_daemon ;; # Starts a server
	-sr) restart_server ;; # Restarts the server daemon
	-sk) kill_daemon ;;    # Kills the server daemon
	-g) run_eclient ;; # Starts Emacs client in GUI mode
	-t) emacsclient -nw ;; # This will start the terminal client
	-deb) emacs --debug-init ;; # Starts emacs in debug mode
	-ds) $doompath sync ;;
	-du) $doompath upgrade ;;
	-db) $doompath build ;;
	-dp) $doompath purge ;;
	-dd) $doompath doctor ;;

	*) # Will print out help if any other key is typed
		print_help ;;

esac
